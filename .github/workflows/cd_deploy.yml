name: CD-Deploy
on:
    push:
        branches:
            - 'main'
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_REGION: 'ap-southeast-7'
    MLFLOW_TRACKING_DNS: ${{ secrets.MLFLOW_TRACKING_DNS }}

jobs:
 build-push-deploy:
   runs-on: ubuntu-latest
   steps:
     - name: Checkout Repo
       uses: actions/checkout@v2

     - name: Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}

     - uses: hashicorp/setup-terraform@v2
     - name: Terraform plan
       id: tf-plan
       working-directory: 'inference/infrastructure/'
       run: |
         terraform init && terraform plan -var-file=prod.tfvars

     - name: Terraform apply (Step1 ECR)
       id: tf-apply-1
       working-directory: 'inference/infrastructure/'
    #    if: ${{ steps.tf-plan.outcome }} == 'success'
       run: |
         terraform apply -auto-approve -var "step=1" -var-file=prod.tfvars
         echo "::set-output name=ecr_repository_url::$(terraform output ecr_repository_url | xargs)"

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Build Docker image and push to ECR
       id: build-push
       env:
         ECR_REPOSITORY: ${{ steps.tf-apply-1.outputs.ecr_repository_url }}
         LOCAL_IMAGE_NAME: 'lambda-function-condo4rent'
         IMAGE_TAG: "latest"
       run: |
         docker build -t ${LOCAL_IMAGE_NAME}:${IMAGE_TAG} . -f dockerfile .
         docker tag ${LOCAL_IMAGE_NAME}:${IMAGE_TAG} ${ECR_REPOSITORY}:${TAG}
         docker push ${ECR_REPOSITORY}:${TAG}
         echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

     - name: Terraform apply (Step2 Lambda)
       id: tf-apply-2
       working-directory: 'inference/infrastructure/'
       run: |
         terraform apply -auto-approve -var "step=2" -var-file=prod.tfvars
